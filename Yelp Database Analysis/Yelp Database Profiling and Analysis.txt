
PART 1: Profiling data of yelp database.

Profile the data by finding the total number of records for each of the tables below:

CODE:   SELECT COUNT(*)
		FROM Table_Name
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

CODE:	SELECT COUNT (DISTINCT key)
		FROM table_name

i. Business = id: 10000
ii. Hours = business_id: 1562 
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = id: 10000 , business_id: 8090, user_id: 9581
vi. Checkin =  business_id: 493
vii. Photo =  id: 10000, business_id: 6493
viii. Tip = user_id: 537, business_id: 3979
ix. User =  id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



columns with null values in the Users table

	Answer: 0
	
	
	SQL code used to arrive at answer:

		SELECT COUNT(*)
		FROM user
		WHERE id IS NULL 
		OR name IS NULL 
		OR review_count IS NULL 
		OR yelping_since IS NULL 
		OR useful IS NULL 
		OR funny IS NULL
		OR cool IS NULL 
		OR fans IS NULL 
		OR average_stars IS NULL 
		OR compliment_hot IS NULL 
		OR compliment_more IS NULL 
		OR compliment_profile IS NULL 
		OR compliment_cute IS NULL 
		OR compliment_list IS NULL 
		OR compliment_note IS NULL 
		OR compliment_plain IS NULL 
		OR compliment_cool IS NULL 
		OR compliment_funny IS NULL 
		OR compliment_writer IS NULL
		OR compliment_photos IS NULL
	
	

	
For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:



CODE:   For calculating Maximum:

		SELECT MAX(Column_Name)
		FROM Table

		For calculating Minimum:

		SELECT MIN(Column_Name)
		FROM Table

		For Calculating Average:

		SELECT AVG(Column_Name)
		FROM Table



SELECT AVG(column)
		FROM table

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1 		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city, SUM(review_count) as sum
	FROM Business
	GROUP BY city
	ORDER BY sum DESC


	Result 
	+-----------------+-------+
	| city            |   sum |
	+-----------------+-------+
	| Las Vegas       | 82854 |
	| Phoenix         | 34503 |
	| Toronto         | 24113 |
	| Scottsdale      | 20614 |
	| Charlotte       | 12523 |
	| Henderson       | 10871 |
	| Tempe           | 10504 |
	| Pittsburgh      |  9798 |
	| Montréal        |  9448 |
	| Chandler        |  8112 |
	| Mesa            |  6875 |
	| Gilbert         |  6380 |
	| Cleveland       |  5593 |
	| Madison         |  5265 |
	| Glendale        |  4406 |
	| Mississauga     |  3814 |
	| Edinburgh       |  2792 |
	| Peoria          |  2624 |
	| North Las Vegas |  2438 |
	| Markham         |  2352 |
	| Champaign       |  2029 |
	| Stuttgart       |  1849 |
	| Surprise        |  1520 |
	| Lakewood        |  1465 |
	| Goodyear        |  1155 |
	+-----------------+-------+
	(Output limit exceeded, 25 of 362 total rows shown)


	
the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, COUNT(*)
FROM business
WHERE city = "Avon"
GROUP BY Stars


 Resulting Table Below (2 columns – star rating and count):

+-------+----------+
| stars | COUNT(*) |
+-------+----------+
|   1.5 |        1 |
|   2.5 |        2 |
|   3.5 |        3 |
|   4.0 |        2 |
|   4.5 |        1 |
|   5.0 |        1 |
+-------+----------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, COUNT(*)
FROM business
WHERE city = "Beachwood"
GROUP BY Stars



Resulting Table Below (2 columns – star rating and count):
		
+-------+----------+
| stars | COUNT(*) |
+-------+----------+
|   2.0 |        1 |
|   2.5 |        1 |
|   3.0 |        2 |
|   3.5 |        2 |
|   4.0 |        1 |
|   4.5 |        2 |
|   5.0 |        5 |
+-------+----------+


the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT id, name, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3

	
	Result:
	
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+	


Does posing more reviews correlate with more fans?


	NO, As we see in the table below, which is sorted in descending order of the number of reviews by each user, we see no decreasing trend with the number of fans. 
	Which should have been the case if there was a correlation between the number of reviews and fans. 

	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Gerald    |         2000 |  253 |
	| Sara      |         1629 |   50 |
	| Yuri      |         1339 |   76 |
	| .Hon      |         1246 |  101 |
	| William   |         1215 |  126 |
	| Harald    |         1153 |  311 |
	| eric      |         1116 |   16 |
	| Roanna    |         1039 |  104 |
	| Mimi      |          968 |  497 |
	| Christine |          930 |  173 |
	| Ed        |          904 |   38 |
	| Nicole    |          864 |   43 |
	| Fran      |          862 |  124 |
	| Mark      |          861 |  115 |
	| Christina |          842 |   85 |
	| Dominic   |          836 |   37 |
	| Lissa     |          834 |  120 |
	| Lisa      |          813 |  159 |
	| Alison    |          775 |   61 |
	| Sui       |          754 |   78 |
	| Tim       |          702 |   35 |
	| L         |          696 |   10 |
	| Angela    |          694 |  101 |
	| Crissy    |          676 |   25 |
	| Lyn       |          675 |   45 |
	+-----------+--------------+------+
	(Output limit exceeded, 25 of 10000 total rows shown)
	
	CODE TO OBTAIN THE TABLE:

	SELECT name, review_count,fans
	FROM user
	ORDER BY review_count DESC

	
 Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	More Reviews with the word "Love" with 1780 comments compared to 232 hate comments

	
	SQL code used to arrive at answer:

	CODE TO CALCULATE THE NUMBER OF HATE COMMENTS:

	SELECT COUNT(*)
	FROM review
	WHERE  LOWER(text)  LIKE "%hate%"

	OUTPUT:
	+----------+
	| COUNT(*) |
	+----------+
	|      232 |
	+----------+
	

	CODE TO CALCULATE THE NUMBER OF LOVE COMMENTS:

	SELECT COUNT(*)
	FROM review
	WHERE  LOWER(text)  LIKE  "%love%"

	OUTPUT:
	+----------+
	| COUNT(*) |
	+----------+
	|     1780 |
	+----------+

	
the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
			

Part 2: Inferences and Analysis

Picking one city and category of your choice and group the businesses in that city or category by their overall star rating. Comparing the businesses with 2-3 stars to the businesses with 4-5 stars 
 
 city = Las Vegas
 category = shopping
	
 Do the two groups you chose to analyze have a different distribution of hours?

Yes, the 2 groups have different distribution of hours with 2-3 stars are open for less duration on saturday,
wheras restuarants with 4-5 stars are open till late on staurdays as well.



 Do the two groups you chose to analyze have a different number of reviews?

there is no connection between the groups and the number of reviews, the reviews are similar in both cases
         
         
 Are you able to infer anything from the location data provided between these two groups? Explain.

NO, because there are a lot of locations and each location has businesses of both groups.

SQL code used for analysis:

SELECT
business.name, business.city, category.category, business.stars, hours.hours, business.review_count, business.address,
business.postal_code
FROM (business INNER JOIN category ON business.id = 
category.business_id) INNER JOIN hours ON hours.business_id =
business.id
WHERE business.city = 'Las Vegas' AND category.category = "Shopping"
GROUP BY business.stars;

		
2. finding difference between open and closed business groups,
		
i. Difference 1:
   
 	+---------+---------------+-------------------+----------+
	| is_open |    AVG(stars) | AVG(review_count) | COUNT(*) |
	+---------+---------------+-------------------+----------+
	|       0 | 3.52039473684 |     23.1980263158 |     1520 |
	|       1 | 3.67900943396 |     31.7570754717 |     8480 |
	+---------+---------------+-------------------+----------+

    We can see the difference in average stars which is 3.5 for closed restaurants and 3.6 for open restarants

ii. Difference 2:
         
   	+---------+---------------+-------------------+----------+
	| is_open |    AVG(stars) | AVG(review_count) | COUNT(*) |
	+---------+---------------+-------------------+----------+
	|       0 | 3.52039473684 |     23.1980263158 |     1520 |
	|       1 | 3.67900943396 |     31.7570754717 |     8480 |
	+---------+---------------+-------------------+----------+      
     
    We can see the difference in average review count  is 31.75 for open restaurants and 23.19 for closed restaurants, this is understandable as the open restuarants may have been open for a long time. 
    Additionally we can see that the count of the number of restuarants open is 8480 which is way more than the ones which are closed which is 1520.  

SQL code used for analysis:

SELECT is_open, AVG(stars), AVG(review_count), COUNT(*)
FROM business
GROUP BY is_open



SELF ANALYSIS CLASSIFICATION: 

I chose to do classification and clustering businesses based on their star rating and review count.
                  
I chose to classify businesses based on the number of star THe classification clustering is based on the following: 

It is based on the business table. 

IF the value of Stars is less than 2 Then the Classification is POOR
IF the value of stars for a business is between 3 and 3 then the restaurant is BAD
IF the value of stars for a business is between 3 and 4 then the restaurant is AVERAGE
IF the value of stars for a business is greater than 4 then the restaurant is EXCELLENT

NOTE: the classification is done by taking the review count for each business into account, I feel that restaurants having rating below 50 cannot be classified accurately since the reviews do not properly describe the condition of the restaurant therefore the data is only considered for restuarants having reviews more than 50, furthermore, there is no use of classifying restaurants which have already been closed, therefore the restaurants that have been closed are 
removed from the database.
                           
                  
iii. Output of your finished dataset:
         
+------------------------+--------------------------------------------+-----------+
| id                     | name                                       | Category  |
+------------------------+--------------------------------------------+-----------+
| --9e1ONYQuAa-CB_Rrw7Tw | Delmonico Steakhouse                       | AVERAGE   |
| --cZ6Hhc9F7VkKXxHMVZSQ | Pio Pio                                    | AVERAGE   |
| -0qht1roIqleKiQkBLDkbw | Cancun Resort Las Vegas by Diamond Resorts | BAD       |
| -0tgMGl7D9B10YjSN2ujLA | Dubliner                                   | AVERAGE   |
| -1UMR00eXtwaeh59pEiDjA | Matt's Big Breakfast                       | AVERAGE   |
| -1VaIJza42Hjev6ukacCNg | Rio Mirage Cafe Y Cantina                  | AVERAGE   |
| -1xuC540Nycht_iWFeJ-dw | Romados                                    | EXCELLENT |
| -2ToCaDFpTNmmg3QFzxcWg | Showtime Tours                             | POOR      |
| -3zffZUHoY8bQjGfPSoBKQ | Michael Mina                               | AVERAGE   |
| -4TMQnQJW1yd6NqGRDvAeA | The House Brasserie                        | AVERAGE   |
| -6h3K1hj0d4DRcZNUtHDuw | Brio Tuscan Grille                         | AVERAGE   |
| -6tvduBzjLI1ISfs3F_qTg | Joyride Taco House                         | AVERAGE   |
| -76didnxGiiMO80BjSpYsQ | Green Beanery                              | BAD       |
| -7H-oXvCxJzuT42ky6Db0g | Industry Public House                      | AVERAGE   |
| -8O8sVCnaIKHP-596zN9UA | Blue Canyon                                | AVERAGE   |
| -8QlV3b_9H4BAh6LgMIr1g | Nandini Indian Cuisine                     | EXCELLENT |
| -8ZiMXZReeTD3kwEvS0Lww | The Butcher Block                          | EXCELLENT |
| -8iwcXhLnyqbLgvcrJGgaw | Red Rocks Cafe                             | AVERAGE   |
| -95mbLJsa0CxXhpaNL4LvA | The Perfect Scoop & Boba Tea               | AVERAGE   |
| -9YyInW1wapzdNZrhQJ9dg | Fresh Buffet                               | BAD       |
| -9dmhyBvepc08KPEHlEM0w | CN Tower                                   | AVERAGE   |
| -9eNGMp8XiygI8t8QFuFWw | The Melting Pot                            | AVERAGE   |
| -9nai28tnoylwViuJVrYEQ | Tapas Papa Frita                           | AVERAGE   |
| -9u2uFwhlj3Yq4mG5IweoA | Hawker Bar                                 | AVERAGE   |
| -AD5PiuJHgdUcAK-Vxao2A | Smashburger                                | AVERAGE   |
+------------------------+--------------------------------------------+-----------+
(Output limit exceeded, 25 of 554 total rows shown)


SQL code you used to create the final dataset:


SELECT id, name,
CASE
WHEN stars < 2 THEN "POOR"
WHEN stars  BETWEEN 2 AND 3 THEN "BAD" 
WHEN stars BETWEEN 3 AND  4 THEN "AVERAGE"
WHEN stars > 4 THEN "EXCELLENT"
END Category
FROM business
WHERE id in (SELECT id 
                FROM business
                WHERE is_open = 1 AND review_count > 100)
